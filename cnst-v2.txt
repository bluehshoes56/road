# COMMAND ----------
# Enhanced Constant Merchant Analysis with Quarterly Tracking - FINAL VERSION
# Improved console formatting while maintaining working logic and CSV exports

from pyspark.sql.functions import col, countDistinct, sum as spark_sum, avg, when, lit, broadcast
import pandas as pd
import os

print("Creating Enhanced Constant Merchant Analysis with Quarterly Tracking - FINAL")

# COMMAND ----------
# Ensure output directory exists
output_path = "/Workspace/Repos/iter2/output"
try:
    os.makedirs(output_path, exist_ok=True)
    print(f"âœ“ Output directory confirmed: {output_path}")
except:
    print(f"Note: Using output directory: {output_path}")

# COMMAND ----------
# Define time periods
period1_months = [202012, 202101, 202102, 202103, 202104, 202105, 202106,
                  202107, 202108, 202109, 202110, 202111, 202112,
                  202201, 202202, 202203]  # Dec 2020 - Mar 2022 (16 months)

period2_months = [202101, 202102, 202103, 202104, 202105, 202106,
                  202107, 202108, 202109, 202110, 202111, 202112,
                  202201, 202202]  # Jan 2021 - Feb 2022 (14 months)

# Get all available months for quarterly analysis
available_months = gbs_mids_joined.select("txn_year_month").distinct().collect()
available_months_list = sorted([row.txn_year_month for row in available_months])

# Define quarterly endpoints after Feb 2022
quarterly_months = []
for year_month in available_months_list:
    if int(year_month) > 202202:  # After Feb 2022
        year = int(year_month) // 100
        month = int(year_month) % 100
        # Quarterly points: Jun, Sep, Dec
        if month in [3, 6, 9, 12]:
            quarterly_months.append(year_month)

print(f"14-month base period: {period2_months[0]} to {period2_months[-1]}")
print(f"Quarterly tracking periods: {quarterly_months}")

# COMMAND ----------
# Create constant merchant lists
print("\nIdentifying constant merchants...")

# 14-month constant merchants (our base cohort)
period2_data = gbs_mids_joined.filter(col("txn_year_month").isin(period2_months))
merchants_14m_counts = period2_data.groupBy("merchant_key").agg(
    countDistinct("txn_year_month").alias("months_present")
)

constant_merchants_14m = merchants_14m_counts.filter(col("months_present") == 14).select("merchant_key")
constant_14m_count = constant_merchants_14m.count()

print(f"14-month constant merchants (base cohort): {constant_14m_count:,}")

# 16-month constant merchants for comparison
period1_data = gbs_mids_joined.filter(col("txn_year_month").isin(period1_months))
merchants_16m_counts = period1_data.groupBy("merchant_key").agg(
    countDistinct("txn_year_month").alias("months_present")
)

constant_merchants_16m = merchants_16m_counts.filter(col("months_present") == 16).select("merchant_key")
constant_16m_count = constant_merchants_16m.count()

print(f"16-month constant merchants: {constant_16m_count:,}")

# COMMAND ----------
# Enhanced formatting functions (UNCHANGED - WORKING LOGIC)
def format_number_with_commas(value):
    """Format numbers with commas and no decimals"""
    if pd.isna(value) or value is None:
        return "0"
    try:
        return f"{int(round(float(value))):,}"
    except:
        return "0"

def format_percentage(value, total):
    """Format as percentage with 1 decimal"""
    if pd.isna(value) or pd.isna(total) or total == 0:
        return "0.0%"
    try:
        pct = (float(value) / float(total)) * 100
        return f"{pct:.1f}%"
    except:
        return "0.0%"

def format_currency(value):
    """Format currency amounts rounded to no decimals"""
    if pd.isna(value) or value is None:
        return "0"
    try:
        return f"{int(round(float(value))):,}"
    except:
        return str(value)

# COMMAND ----------
# Base 14-month analysis with enhanced formatting
print("\n" + "="*150)
print("14-MONTH CONSTANT MERCHANTS BASE ANALYSIS")
print("="*150)

data_14m_constant = gbs_mids_joined \
    .filter(col("txn_year_month").isin(period2_months)) \
    .join(broadcast(constant_merchants_14m), on="merchant_key", how="inner")

# NAICS3 base analysis
stats_14m_naics3 = data_14m_constant.groupBy("naics3", "txn_year_month").agg(
    countDistinct("merchant_key").alias("unique_merchants"),
    spark_sum(col("adjusted_txn_cnt")).alias("total_transactions"),
    spark_sum(col("total_tran_amount")).alias("total_amount")
).withColumn("avg_amount_per_txn", col("total_amount") / col("total_transactions")) \
 .withColumn("avg_amount_per_merchant", col("total_amount") / col("unique_merchants")) \
 .orderBy("naics3", "txn_year_month")

base_14m_pd = stats_14m_naics3.toPandas()

if len(base_14m_pd) > 0:
    # Enhanced formatting with vertical separators
    base_14m_pd["merchants_fmt"] = base_14m_pd["unique_merchants"].apply(format_number_with_commas)
    base_14m_pd["transactions_fmt"] = base_14m_pd["total_transactions"].apply(format_number_with_commas)
    base_14m_pd["amount_fmt"] = base_14m_pd["total_amount"].apply(format_currency)
    base_14m_pd["avg_per_txn_fmt"] = base_14m_pd["avg_amount_per_txn"].apply(format_currency)
    base_14m_pd["avg_per_merchant_fmt"] = base_14m_pd["avg_amount_per_merchant"].apply(format_currency)

    print("\n14-Month Constant Merchants Base Analysis (NAICS3) - Sample Data:")
    print("-" * 150)

    # Create readable formatted output with proper spacing
    display_df = base_14m_pd[["naics3", "txn_year_month", "merchants_fmt", "transactions_fmt", 
                              "amount_fmt", "avg_per_txn_fmt", "avg_per_merchant_fmt"]].copy()

    # Print header with proper spacing
    print(f"{'NAICS3':<10} {'Month':<10} {'Merchants':<15} {'Transactions':<20} {'Total Amount':<20} {'Avg/Txn':<15} {'Avg/Merchant':<20}")
    print("-" * 150)

    # Show first 20 rows with proper spacing
    for _, row in display_df.head(20).iterrows():
        print(f"{row['naics3']:<10} {row['txn_year_month']:<10} {row['merchants_fmt']:<15} {row['transactions_fmt']:<20} {row['amount_fmt']:<20} {row['avg_per_txn_fmt']:<15} {row['avg_per_merchant_fmt']:<20}")

    print(f"\nTotal rows in base analysis: {len(base_14m_pd):,}")

# COMMAND ----------
# Quarterly tracking analysis for 14-month constant merchants
print("\n" + "="*150)
print("QUARTERLY TRACKING OF 14-MONTH CONSTANT MERCHANTS")
print("="*150)
print(f"Base cohort: {constant_14m_count:,} merchants from 14-month constant sample")

# Create comprehensive quarterly analysis
quarterly_results_naics3 = []
quarterly_results_naics6 = []

# Add baseline (Feb 2022 - end of 14-month period)
baseline_month = 202202
tracking_months = [baseline_month] + quarterly_months

for month in tracking_months:
    if month in available_months_list:
        print(f"\nAnalyzing month: {month}")
        
        # Get data for this month, filtered to our 14-month constant merchants
        monthly_data = gbs_mids_joined \
            .filter(col("txn_year_month") == month) \
            .join(broadcast(constant_merchants_14m), on="merchant_key", how="inner")
        
        # NAICS3 analysis
        monthly_stats_naics3 = monthly_data.groupBy("naics3").agg(
            countDistinct("merchant_key").alias("active_merchants"),
            spark_sum(col("adjusted_txn_cnt")).alias("total_transactions"),
            spark_sum(col("total_tran_amount")).alias("total_amount")
        ).withColumn("txn_year_month", lit(month)) \
         .withColumn("avg_amount_per_txn", col("total_amount") / col("total_transactions")) \
         .withColumn("avg_amount_per_merchant", col("total_amount") / col("active_merchants"))
        
        quarterly_results_naics3.append(monthly_stats_naics3.toPandas())
        
        # NAICS6 analysis (if available)
        schema_fields = [field.name for field in gbs_mids_joined.schema.fields]
        if "naics6" in schema_fields:
            monthly_stats_naics6 = monthly_data.groupBy("naics6").agg(
                countDistinct("merchant_key").alias("active_merchants"),
                spark_sum(col("adjusted_txn_cnt")).alias("total_transactions"),
                spark_sum(col("total_tran_amount")).alias("total_amount")
            ).withColumn("txn_year_month", lit(month)) \
             .withColumn("avg_amount_per_txn", col("total_amount") / col("total_transactions")) \
             .withColumn("avg_amount_per_merchant", col("total_amount") / col("active_merchants"))
            
            quarterly_results_naics6.append(monthly_stats_naics6.toPandas())

# COMMAND ----------
# Combine and format quarterly results for NAICS3 with improved readability
if quarterly_results_naics3:
    quarterly_df_naics3 = pd.concat(quarterly_results_naics3, ignore_index=True)
    
    # Get unique NAICS3 and months for pivot structure
    naics3_list = sorted(quarterly_df_naics3['naics3'].unique())[:15]  # Top 15 for better display
    month_list = sorted(quarterly_df_naics3['txn_year_month'].unique())
    
    print(f"\n" + "="*180)
    print("QUARTERLY TRACKING SUMMARY (NAICS3 - Top 15 Industries)")
    print("="*180)
    print(f"Base cohort: {constant_14m_count:,} merchants | Tracking periods: {len(month_list)} periods")
    
    # Create separate readable sections for each metric
    metrics_info = {
        'active_merchants': 'ACTIVE MERCHANTS COUNT',
        'retention_pct': 'RETENTION PERCENTAGE (%)',
        'total_amount': 'TOTAL TRANSACTION AMOUNT ($)',
        'avg_amount_per_txn': 'AVERAGE AMOUNT PER TRANSACTION ($)',
        'avg_amount_per_merchant': 'AVERAGE AMOUNT PER MERCHANT ($)'
    }
    
    for metric, title in metrics_info.items():
        print(f"\n{title}")
        print("-" * 180)
        
        # Create header
        header = f"{'NAICS3':<10}"
        for month in month_list:
            header += f"{str(month):<15}"
        print(header)
        print("-" * 180)
        
        # Show data for each NAICS3
        for naics3 in naics3_list:
            naics_data = quarterly_df_naics3[quarterly_df_naics3['naics3'] == naics3]
            row = f"{naics3:<10}"
            
            for month in month_list:
                month_data = naics_data[naics_data['txn_year_month'] == month]
                
                if len(month_data) > 0:
                    if metric == 'active_merchants':
                        value = format_number_with_commas(month_data['active_merchants'].values[0])
                    elif metric == 'retention_pct':
                        # Calculate retention percentage vs base cohort
                        base_naics3_data = data_14m_constant.filter(col("naics3") == naics3).groupBy("naics3").agg(
                            countDistinct("merchant_key").alias("base_merchants")
                        ).collect()
                        base_merchants = base_naics3_data[0]['base_merchants'] if len(base_naics3_data) > 0 else 1
                        current_merchants = month_data['active_merchants'].values[0] if len(month_data) > 0 else 0
                        value = format_percentage(current_merchants, base_merchants)
                    elif metric == 'total_amount':
                        value = format_currency(month_data['total_amount'].values[0])
                    elif metric == 'avg_amount_per_txn':
                        value = format_currency(month_data['avg_amount_per_txn'].values[0])
                    elif metric == 'avg_amount_per_merchant':
                        value = format_currency(month_data['avg_amount_per_merchant'].values[0])
                    else:
                        value = "N/A"
                else:
                    value = "0"
                
                row += f"{value:<15}"
            
            print(row)

# COMMAND ----------
# Quarterly results for NAICS6 (if available)
if quarterly_results_naics6:
    quarterly_df_naics6 = pd.concat(quarterly_results_naics6, ignore_index=True)
    print(f"\nâœ“ NAICS6 quarterly data prepared: {len(quarterly_df_naics6):,} records")

# COMMAND ----------
# Export enhanced results to OUTPUT FOLDER
print("\n" + "="*150)
print("EXPORTING ENHANCED RESULTS TO OUTPUT FOLDER")
print("="*150)

export_files = []

# Export base analysis with clear naming
if len(base_14m_pd) > 0:
    base_export_path = f"{output_path}/01_constant_merchants_14m_base_analysis_naics3.csv"
    base_14m_pd.to_csv(base_export_path, index=False)
    export_files.append("01_constant_merchants_14m_base_analysis_naics3.csv")
    print(f"âœ“ Exported: {base_export_path}")

# Export quarterly tracking NAICS3 with clear naming
if quarterly_results_naics3:
    quarterly_naics3_path = f"{output_path}/02_quarterly_tracking_naics3_detailed.csv"
    quarterly_df_naics3.to_csv(quarterly_naics3_path, index=False)
    export_files.append("02_quarterly_tracking_naics3_detailed.csv")
    print(f"âœ“ Exported: {quarterly_naics3_path}")

# Export quarterly tracking NAICS6 with clear naming
if quarterly_results_naics6:
    quarterly_naics6_path = f"{output_path}/03_quarterly_tracking_naics6_detailed.csv"
    quarterly_df_naics6.to_csv(quarterly_naics6_path, index=False)
    export_files.append("03_quarterly_tracking_naics6_detailed.csv")
    print(f"âœ“ Exported: {quarterly_naics6_path}")

# Export merchant list with clear naming
merchant_list_path = f"{output_path}/04_constant_merchants_14m_master_list.csv"
constant_merchants_14m.toPandas().to_csv(merchant_list_path, index=False)
export_files.append("04_constant_merchants_14m_master_list.csv")
print(f"âœ“ Exported: {merchant_list_path}")

# Export summary metrics with clear naming
if quarterly_results_naics3:
    summary_data = []
    for month in sorted(quarterly_df_naics3['txn_year_month'].unique()):
        month_data = quarterly_df_naics3[quarterly_df_naics3['txn_year_month'] == month]
        total_merchants = month_data['active_merchants'].sum()
        total_amount = month_data['total_amount'].sum()
        total_transactions = month_data['total_transactions'].sum()
        
        summary_data.append({
            'txn_year_month': month,
            'total_active_merchants': total_merchants,
            'total_transactions': total_transactions,
            'total_amount': total_amount,
            'retention_rate_pct': (total_merchants / constant_14m_count) * 100 if constant_14m_count > 0 else 0
        })
    
    summary_df = pd.DataFrame(summary_data)
    summary_path = f"{output_path}/05_quarterly_summary_metrics_dashboard.csv"
    summary_df.to_csv(summary_path, index=False)
    export_files.append("05_quarterly_summary_metrics_dashboard.csv")
    print(f"âœ“ Exported: {summary_path}")

print(f"\nAll {len(export_files)} CSV files exported to {output_path}:")
for file in export_files:
    print(f"  â€¢ {file}")

# COMMAND ----------
print("\n" + "="*150)
print("ENHANCED CONSTANT MERCHANT QUARTERLY ANALYSIS COMPLETED")
print("="*150)
print(f"âœ“ 14-month constant merchant base: {constant_14m_count:,} merchants")
print(f"âœ“ Quarterly analysis periods: {len(quarterly_months)} quarters")
print(f"âœ“ Improved console formatting with proper spacing and readability")
print(f"âœ“ All CSV files exported to ./output/ folder (NOT /dbfs/FileStore/)")
print(f"âœ“ Working merchant identification logic preserved (NO changes)")
print(f"âœ“ Additional summary metrics table created")
print(f"âœ“ Both NAICS3 and NAICS6 level analysis")
print(f"\nReady for quarterly same-store sales analysis and extrapolation")
print("="*150)
