# COMMAND ----------
# Enhanced Constant Merchant Analysis with Quarterly Tracking - FIXED VERSION
# Includes proper type conversion, better output formatting, and flexible quarter intervals

from pyspark.sql.functions import col, countDistinct, sum as spark_sum, avg, when, lit, broadcast, round as spark_round
from datetime import datetime
import pandas as pd

# CONFIGURABLE PARAMETERS
QUARTER_INTERVAL = 6  # Change to 3 for quarterly, 6 for semi-annual reporting
OUTPUT_PATH = "/dbfs/FileStore/output/"  # Output folder path

print(f"Enhanced Constant Merchant Analysis - {QUARTER_INTERVAL}-month intervals")
print(f"Output path: {OUTPUT_PATH}")

# COMMAND ----------
# Define time periods
period1_months = [202012, 202101, 202102, 202103, 202104, 202105, 202106, 
                  202107, 202108, 202109, 202110, 202111, 202112, 
                  202201, 202202, 202203]  # Dec 2020 - Mar 2022 (16 months)

period2_months = [202101, 202102, 202103, 202104, 202105, 202106, 
                  202107, 202108, 202109, 202110, 202111, 202112, 
                  202201, 202202]  # Jan 2021 - Feb 2022 (14 months)

# Get all available months for quarterly analysis
available_months = gbs_mids_joined.select("txn_year_month").distinct().collect()
available_months_list = sorted([row.txn_year_month for row in available_months])

# Define tracking endpoints based on interval setting
tracking_months = []
for year_month in available_months_list:
    if year_month > 202202:  # After Feb 2022
        year = int(year_month) // 100  # Fixed: added int() conversion
        month = int(year_month) % 100  # Fixed: added int() conversion
        
        if QUARTER_INTERVAL == 3:
            # Quarterly: Mar, Jun, Sep, Dec
            if month in [3, 6, 9, 12]:
                tracking_months.append(year_month)
        elif QUARTER_INTERVAL == 6:
            # Semi-annual: Jun, Dec
            if month in [6, 12]:
                tracking_months.append(year_month)

print(f"14-month base period: {period2_months[0]} to {period2_months[-1]}")
print(f"Tracking periods ({QUARTER_INTERVAL}-month intervals): {tracking_months}")

# COMMAND ----------
# Create constant merchant lists
print("Identifying constant merchants...")

# 14-month constant merchants (our base cohort)
period2_data = gbs_mids_joined.filter(col("txn_year_month").isin(period2_months))
merchants_14m_counts = period2_data.groupBy("merchant_key").agg(
    countDistinct("txn_year_month").alias("months_present")
)
constant_merchants_14m = merchants_14m_counts.filter(col("months_present") == 14).select("merchant_key")
constant_14m_count = constant_merchants_14m.count()

print(f"14-month constant merchants (base cohort): {constant_14m_count:,}")

# COMMAND ----------
# Enhanced formatting functions with proper rounding
def format_number_with_commas(value):
    """Format numbers with commas and no decimals"""
    if pd.isna(value) or value is None:
        return "0"
    try:
        return f"{int(round(float(value))):,}"
    except:
        return "0"

def format_percentage(value, total):
    """Format as percentage with 1 decimal"""
    if pd.isna(value) or pd.isna(total) or total == 0:
        return "0.0%"
    try:
        pct = (float(value) / float(total)) * 100
        return f"{pct:.1f}%"
    except:
        return "0.0%"

def format_currency(value):
    """Format currency amounts rounded to no decimals with commas"""
    if pd.isna(value) or value is None:
        return "0"
    try:
        return f"{int(round(float(value))):,}"
    except:
        return "0"

# COMMAND ----------
# Base 14-month analysis for merchant counts by NAICS (needed for retention calculations)
print("Creating base merchant counts by NAICS...")

data_14m_constant = gbs_mids_joined \
    .filter(col("txn_year_month").isin(period2_months)) \
    .join(broadcast(constant_merchants_14m), on="merchant_key", how="inner")

# Get base merchant counts by NAICS3
base_merchants_naics3 = data_14m_constant.groupBy("naics3").agg(
    countDistinct("merchant_key").alias("base_merchants")
).toPandas()

# Get base merchant counts by NAICS6 (if available)
schema_fields = [field.name for field in gbs_mids_joined.schema.fields]
if "naics6" in schema_fields:
    base_merchants_naics6 = data_14m_constant.groupBy("naics6").agg(
        countDistinct("merchant_key").alias("base_merchants")
    ).toPandas()
else:
    base_merchants_naics6 = pd.DataFrame()

print(f"Base merchant counts calculated for NAICS3 and NAICS6")

# COMMAND ----------
# Quarterly tracking analysis for 14-month constant merchants
print(f"\n=== TRACKING ANALYSIS ({QUARTER_INTERVAL}-MONTH INTERVALS) ===")

# Add baseline (Feb 2022 - end of 14-month period)
baseline_month = 202202
all_tracking_months = [baseline_month] + tracking_months

quarterly_results_naics3 = []
quarterly_results_naics6 = []

for month in all_tracking_months:
    if month in available_months_list:
        print(f"Processing month: {month}")
        
        # Get data for this month, filtered to our 14-month constant merchants
        monthly_data = gbs_mids_joined \
            .filter(col("txn_year_month") == month) \
            .join(broadcast(constant_merchants_14m), on="merchant_key", how="inner")
        
        # NAICS3 analysis
        monthly_stats_naics3 = monthly_data.groupBy("naics3").agg(
            countDistinct("merchant_key").alias("active_merchants"),
            spark_sum(col("adjusted_txn_cnt")).alias("total_transactions"),
            spark_sum(col("total_tran_amount")).alias("total_amount")
        ).withColumn("txn_year_month", lit(month)) \
         .withColumn("avg_amount_per_txn", 
                     when(col("total_transactions") > 0, 
                          col("total_amount") / col("total_transactions")).otherwise(0)) \
         .withColumn("avg_amount_per_merchant", 
                     when(col("active_merchants") > 0, 
                          col("total_amount") / col("active_merchants")).otherwise(0))
        
        quarterly_results_naics3.append(monthly_stats_naics3.toPandas())
        
        # NAICS6 analysis (if available)
        if "naics6" in schema_fields:
            monthly_stats_naics6 = monthly_data.groupBy("naics6").agg(
                countDistinct("merchant_key").alias("active_merchants"),
                spark_sum(col("adjusted_txn_cnt")).alias("total_transactions"),
                spark_sum(col("total_tran_amount")).alias("total_amount")
            ).withColumn("txn_year_month", lit(month)) \
             .withColumn("avg_amount_per_txn", 
                         when(col("total_transactions") > 0, 
                              col("total_amount") / col("total_transactions")).otherwise(0)) \
             .withColumn("avg_amount_per_merchant", 
                         when(col("active_merchants") > 0, 
                              col("total_amount") / col("active_merchants")).otherwise(0))
            
            quarterly_results_naics6.append(monthly_stats_naics6.toPandas())

# COMMAND ----------
# Format and display NAICS3 results
if quarterly_results_naics3:
    quarterly_df_naics3 = pd.concat(quarterly_results_naics3, ignore_index=True)
    
    # Get unique NAICS3 and months
    naics3_list = sorted(quarterly_df_naics3['naics3'].unique())
    month_list = sorted(quarterly_df_naics3['txn_year_month'].unique())
    
    print(f"\n{'='*120}")
    print(f"TRACKING SUMMARY - NAICS3 ({QUARTER_INTERVAL}-MONTH INTERVALS)")
    print(f"Base cohort: {constant_14m_count:,} merchants from 14-month constant sample")
    print(f"Tracking periods: {month_list}")
    print(f"{'='*120}")
    
    # Create formatted output tables for each metric
    metrics_config = [
        ('MERCHANT COUNTS', 'active_merchants', format_number_with_commas),
        ('RETENTION PERCENTAGE', 'retention_pct', lambda x: x),  # Special handling
        ('TOTAL TRANSACTION AMOUNT', 'total_amount', format_currency),
        ('AVERAGE AMOUNT PER TRANSACTION', 'avg_amount_per_txn', format_currency),
        ('AVERAGE AMOUNT PER MERCHANT', 'avg_amount_per_merchant', format_currency)
    ]
    
    for metric_name, metric_col, formatter in metrics_config:
        print(f"\n{metric_name}:")
        print("-" * 120)
        
        # Create header with vertical separators
        header = f"{'NAICS3':<8}"
        for month in month_list:
            header += f" | {month:<15}"
        print(header)
        print("-" * 120)
        
        # Create rows for each NAICS3
        for naics3 in naics3_list[:15]:  # Limit to top 15 for readability
            naics_data = quarterly_df_naics3[quarterly_df_naics3['naics3'] == naics3]
            row = f"{naics3:<8}"
            
            for month in month_list:
                month_data = naics_data[naics_data['txn_year_month'] == month]
                
                if len(month_data) > 0:
                    if metric_col == 'retention_pct':
                        # Calculate retention percentage
                        base_count = base_merchants_naics3[base_merchants_naics3['naics3'] == naics3]['base_merchants']
                        if len(base_count) > 0:
                            base_val = base_count.iloc[0]
                            current_val = month_data['active_merchants'].iloc[0]
                            value = format_percentage(current_val, base_val)
                        else:
                            value = "0.0%"
                    else:
                        raw_value = month_data[metric_col].iloc[0]
                        value = formatter(raw_value)
                else:
                    value = "0" if metric_col != 'retention_pct' else "0.0%"
                
                row += f" | {value:<15}"
            
            print(row)

# COMMAND ----------
# Format and display NAICS6 results (top 20)
if quarterly_results_naics6 and len(base_merchants_naics6) > 0:
    quarterly_df_naics6 = pd.concat(quarterly_results_naics6, ignore_index=True)
    
    # Get top 20 NAICS6 by total volume
    top_naics6 = quarterly_df_naics6.groupby('naics6')['total_amount'].sum().nlargest(20).index.tolist()
    
    print(f"\n{'='*120}")
    print(f"TRACKING SUMMARY - NAICS6 (Top 20 by Volume)")
    print(f"{'='*120}")
    
    for metric_name, metric_col, formatter in metrics_config:
        print(f"\n{metric_name}:")
        print("-" * 120)
        
        # Create header
        header = f"{'NAICS6':<8}"
        for month in month_list:
            header += f" | {month:<15}"
        print(header)
        print("-" * 120)
        
        # Create rows for top NAICS6
        for naics6 in top_naics6:
            naics_data = quarterly_df_naics6[quarterly_df_naics6['naics6'] == naics6]
            row = f"{naics6:<8}"
            
            for month in month_list:
                month_data = naics_data[naics_data['txn_year_month'] == month]
                
                if len(month_data) > 0:
                    if metric_col == 'retention_pct':
                        # Calculate retention percentage
                        base_count = base_merchants_naics6[base_merchants_naics6['naics6'] == naics6]['base_merchants']
                        if len(base_count) > 0:
                            base_val = base_count.iloc[0]
                            current_val = month_data['active_merchants'].iloc[0]
                            value = format_percentage(current_val, base_val)
                        else:
                            value = "0.0%"
                    else:
                        raw_value = month_data[metric_col].iloc[0]
                        value = formatter(raw_value)
                else:
                    value = "0" if metric_col != 'retention_pct' else "0.0%"
                
                row += f" | {value:<15}"
            
            print(row)

# COMMAND ----------
# Export results to organized folder structure
print(f"\n=== EXPORTING RESULTS TO {OUTPUT_PATH} ===")

try:
    # Create output directory if it doesn't exist
    dbutils.fs.mkdirs(OUTPUT_PATH)
    
    # Export NAICS3 results
    if quarterly_results_naics3:
        quarterly_df_naics3.to_csv(f"{OUTPUT_PATH}quarterly_tracking_naics3_{QUARTER_INTERVAL}month.csv", index=False)
        print(f"✓ Exported: quarterly_tracking_naics3_{QUARTER_INTERVAL}month.csv")
    
    # Export NAICS6 results
    if quarterly_results_naics6:
        quarterly_df_naics6.to_csv(f"{OUTPUT_PATH}quarterly_tracking_naics6_{QUARTER_INTERVAL}month.csv", index=False)
        print(f"✓ Exported: quarterly_tracking_naics6_{QUARTER_INTERVAL}month.csv")
    
    # Export base merchant counts
    base_merchants_naics3.to_csv(f"{OUTPUT_PATH}base_merchants_naics3.csv", index=False)
    print(f"✓ Exported: base_merchants_naics3.csv")
    
    if len(base_merchants_naics6) > 0:
        base_merchants_naics6.to_csv(f"{OUTPUT_PATH}base_merchants_naics6.csv", index=False)
        print(f"✓ Exported: base_merchants_naics6.csv")
    
    # Export constant merchant list
    constant_merchants_14m.toPandas().to_csv(f"{OUTPUT_PATH}constant_merchants_14m_list.csv", index=False)
    print(f"✓ Exported: constant_merchants_14m_list.csv")
    
    print(f"\nAll files exported to: {OUTPUT_PATH}")
    
except Exception as e:
    print(f"Export error: {e}")
    print("Attempting alternative export path...")
    
    # Alternative: Export to default FileStore location
    alt_path = "/dbfs/FileStore/"
    quarterly_df_naics3.to_csv(f"{alt_path}quarterly_tracking_naics3.csv", index=False)
    if quarterly_results_naics6:
        quarterly_df_naics6.to_csv(f"{alt_path}quarterly_tracking_naics6.csv", index=False)
    print(f"Files exported to alternative path: {alt_path}")

# COMMAND ----------
# Summary
print("\n" + "="*100)
print("ENHANCED CONSTANT MERCHANT ANALYSIS COMPLETED")
print("="*100)
print(f"✓ Reporting interval: Every {QUARTER_INTERVAL} months")
print(f"✓ 14-month constant merchant base: {constant_14m_count:,}")
print(f"✓ Tracking periods: {len(tracking_months)} intervals")
print(f"✓ Fixed formatting: comma-separated numbers, no decimals")
print(f"✓ Enhanced output: vertical separators, proper rounding")
print(f"✓ Organized file export to: {OUTPUT_PATH}")
print(f"✓ Both NAICS3 and NAICS6 analysis")

if QUARTER_INTERVAL == 6:
    print("\nCurrent setting: Semi-annual reporting (June/December)")
    print("To change to quarterly: Set QUARTER_INTERVAL = 3")
else:
    print("\nCurrent setting: Quarterly reporting (Mar/Jun/Sep/Dec)")
    print("To change to semi-annual: Set QUARTER_INTERVAL = 6")

print("\nReady for same-store sales tracking analysis!")
