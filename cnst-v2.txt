# COMMAND ----------
# Constant Merchant Cohort Analysis - FIXED VERSION
# This version fixes the column type errors and adds comma formatting

from pyspark.sql.functions import col, countDistinct, sum as spark_sum, avg, when, lit
from datetime import datetime
import pandas as pd

print("Starting Constant Merchant Flag Creation - PRESERVING ALL ORIGINAL DATA")

# COMMAND ----------
# Verify original dataset (no modifications)
print(f"Original dataset rows: {gbs_mids_joined.count():,}")
print(f"Original unique merchants: {gbs_mids_joined.select('merchant_key').distinct().count():,}")

# COMMAND ----------
# Define time periods (no data modification)
period1_months = [202012, 202101, 202102, 202103, 202104, 202105, 202106, 
                  202107, 202108, 202109, 202110, 202111, 202112, 
                  202201, 202202, 202203]  # Dec 2020 - Mar 2022 (16 months)

period2_months = [202101, 202102, 202103, 202104, 202105, 202106, 
                  202107, 202108, 202109, 202110, 202111, 202112, 
                  202201, 202202]  # Jan 2021 - Feb 2022 (14 months)

print(f"Period 1: {len(period1_months)} months - {period1_months[0]} to {period1_months[-1]}")
print(f"Period 2: {len(period2_months)} months - {period2_months[0]} to {period2_months[-1]}")

# COMMAND ----------
# Create merchant presence counts for Period 1 (16 months)
print("Creating Period 1 merchant presence lookup...")

period1_presence = gbs_mids_joined \
    .filter(col("txn_year_month").isin(period1_months)) \
    .groupBy("merchant_key") \
    .agg(countDistinct("txn_year_month").alias("period1_months_present"))

print(f"Period 1 presence table created with {period1_presence.count():,} merchants")

# COMMAND ----------
# Create merchant presence counts for Period 2 (14 months)  
print("Creating Period 2 merchant presence lookup...")

period2_presence = gbs_mids_joined \
    .filter(col("txn_year_month").isin(period2_months)) \
    .groupBy("merchant_key") \
    .agg(countDistinct("txn_year_month").alias("period2_months_present"))

print(f"Period 2 presence table created with {period2_presence.count():,} merchants")

# COMMAND ----------
# Add flags to original dataset WITHOUT removing any rows
print("Adding flags to original dataset while preserving ALL data...")

enhanced_dataset = gbs_mids_joined \
    .join(period1_presence, on="merchant_key", how="left") \
    .join(period2_presence, on="merchant_key", how="left") \
    .withColumn("flag_16_months_constant", 
                when(col("period1_months_present") == 16, 1).otherwise(0)) \
    .withColumn("flag_14_months_constant", 
                when(col("period2_months_present") == 14, 1).otherwise(0)) \
    .drop("period1_months_present", "period2_months_present")

# Verify NO data loss occurred
print(f"Enhanced dataset rows: {enhanced_dataset.count():,}")
print(f"Enhanced dataset unique merchants: {enhanced_dataset.select('merchant_key').distinct().count():,}")
print(f"Original rows preserved: {enhanced_dataset.count() == gbs_mids_joined.count()}")

# COMMAND ----------
# Show flag distribution
print("\nFlag distribution across all data:")
enhanced_dataset.groupBy("flag_16_months_constant", "flag_14_months_constant").count().show()

# Count constant merchants
constant_16m_count = enhanced_dataset.filter(col("flag_16_months_constant") == 1).select("merchant_key").distinct().count()
constant_14m_count = enhanced_dataset.filter(col("flag_14_months_constant") == 1).select("merchant_key").distinct().count()

print(f"Merchants with 16-month constant flag: {constant_16m_count:,}")
print(f"Merchants with 14-month constant flag: {constant_14m_count:,}")

# COMMAND ----------
# Function to format large numbers
def format_large_number(value):
    """Format numbers with K/M/B/T notation"""
    if pd.isna(value) or value is None:
        return "0"
    
    try:
        value = float(value)
        if abs(value) >= 1e12:
            return f"{value/1e12:,.1f}T"
        elif abs(value) >= 1e9:
            return f"{value/1e9:,.1f}B"
        elif abs(value) >= 1e6:
            return f"{value/1e6:,.1f}M"
        elif abs(value) >= 1e3:
            return f"{value/1e3:,.1f}K"
        else:
            return f"{value:,.0f}"
    except:
        return str(value)

# COMMAND ----------
# Analysis for 16-month constant merchants (NAICS3)
print("\nAnalysis for 16-month constant merchants (NAICS3):")

stats_16m_naics3 = enhanced_dataset \
    .filter(col("flag_16_months_constant") == 1) \
    .groupBy("naics3", "txn_year_month") \
    .agg(
        countDistinct("merchant_key").alias("unique_merchants"),
        spark_sum(col("adjusted_txn_cnt")).alias("total_transactions"),
        spark_sum(col("total_tran_amount")).alias("total_amount")
    ) \
    .orderBy("naics3", "txn_year_month")

# Convert to pandas and format
stats_16m_pd = stats_16m_naics3.toPandas()

if len(stats_16m_pd) > 0:
    # Create formatted columns
    stats_16m_pd["merchants_fmt"] = stats_16m_pd["unique_merchants"].apply(lambda x: f"{x:,}")
    stats_16m_pd["transactions_fmt"] = stats_16m_pd["total_transactions"].apply(format_large_number)
    stats_16m_pd["amount_fmt"] = stats_16m_pd["total_amount"].apply(format_large_number)
    
    print("\n16-Month Constant Merchants Analysis (NAICS3):")
    print("=" * 80)
    display_cols = ["naics3", "txn_year_month", "merchants_fmt", "transactions_fmt", "amount_fmt"]
    print(stats_16m_pd[display_cols].to_string(index=False, max_colwidth=15))
else:
    print("No data found for 16-month constant merchants")

# COMMAND ----------
# Analysis for 14-month constant merchants (NAICS3)
print("\n\nAnalysis for 14-month constant merchants (NAICS3):")

stats_14m_naics3 = enhanced_dataset \
    .filter(col("flag_14_months_constant") == 1) \
    .groupBy("naics3", "txn_year_month") \
    .agg(
        countDistinct("merchant_key").alias("unique_merchants"),
        spark_sum(col("adjusted_txn_cnt")).alias("total_transactions"),
        spark_sum(col("total_tran_amount")).alias("total_amount")
    ) \
    .orderBy("naics3", "txn_year_month")

# Convert to pandas and format
stats_14m_pd = stats_14m_naics3.toPandas()

if len(stats_14m_pd) > 0:
    # Create formatted columns
    stats_14m_pd["merchants_fmt"] = stats_14m_pd["unique_merchants"].apply(lambda x: f"{x:,}")
    stats_14m_pd["transactions_fmt"] = stats_14m_pd["total_transactions"].apply(format_large_number)
    stats_14m_pd["amount_fmt"] = stats_14m_pd["total_amount"].apply(format_large_number)
    
    print("\n14-Month Constant Merchants Analysis (NAICS3):")
    print("=" * 80)
    display_cols = ["naics3", "txn_year_month", "merchants_fmt", "transactions_fmt", "amount_fmt"]
    print(stats_14m_pd[display_cols].to_string(index=False, max_colwidth=15))
else:
    print("No data found for 14-month constant merchants")

# COMMAND ----------
# Check for NAICS6 analysis
schema_fields = [field.name for field in enhanced_dataset.schema.fields]
has_naics6 = "naics6" in schema_fields

if has_naics6:
    print("\n\nNAICS6 analysis for 16-month constant merchants:")
    
    stats_16m_naics6 = enhanced_dataset \
        .filter(col("flag_16_months_constant") == 1) \
        .groupBy("naics6", "txn_year_month") \
        .agg(
            countDistinct("merchant_key").alias("unique_merchants"),
            spark_sum(col("adjusted_txn_cnt")).alias("total_transactions"),
            spark_sum(col("total_tran_amount")).alias("total_amount")
        ) \
        .orderBy("naics6", "txn_year_month")
    
    stats_16m_naics6_pd = stats_16m_naics6.toPandas()
    
    if len(stats_16m_naics6_pd) > 0:
        stats_16m_naics6_pd["merchants_fmt"] = stats_16m_naics6_pd["unique_merchants"].apply(lambda x: f"{x:,}")
        stats_16m_naics6_pd["transactions_fmt"] = stats_16m_naics6_pd["total_transactions"].apply(format_large_number)
        stats_16m_naics6_pd["amount_fmt"] = stats_16m_naics6_pd["total_amount"].apply(format_large_number)
        
        print("\n16-Month Constant Merchants Analysis (NAICS6):")
        print("=" * 80)
        display_cols = ["naics6", "txn_year_month", "merchants_fmt", "transactions_fmt", "amount_fmt"]
        print(stats_16m_naics6_pd[display_cols].to_string(index=False, max_colwidth=15))
    
    print("\n\nNAICS6 analysis for 14-month constant merchants:")
    
    stats_14m_naics6 = enhanced_dataset \
        .filter(col("flag_14_months_constant") == 1) \
        .groupBy("naics6", "txn_year_month") \
        .agg(
            countDistinct("merchant_key").alias("unique_merchants"),
            spark_sum(col("adjusted_txn_cnt")).alias("total_transactions"),
            spark_sum(col("total_tran_amount")).alias("total_amount")
        ) \
        .orderBy("naics6", "txn_year_month")
    
    stats_14m_naics6_pd = stats_14m_naics6.toPandas()
    
    if len(stats_14m_naics6_pd) > 0:
        stats_14m_naics6_pd["merchants_fmt"] = stats_14m_naics6_pd["unique_merchants"].apply(lambda x: f"{x:,}")
        stats_14m_naics6_pd["transactions_fmt"] = stats_14m_naics6_pd["total_transactions"].apply(format_large_number)
        stats_14m_naics6_pd["amount_fmt"] = stats_14m_naics6_pd["total_amount"].apply(format_large_number)
        
        print("\n14-Month Constant Merchants Analysis (NAICS6):")
        print("=" * 80)
        display_cols = ["naics6", "txn_year_month", "merchants_fmt", "transactions_fmt", "amount_fmt"]
        print(stats_14m_naics6_pd[display_cols].to_string(index=False, max_colwidth=15))
else:
    print("\nNAICS6 field not found - only NAICS3 analysis performed")

# COMMAND ----------
# Export results
print("\n\nExporting results...")

# Export the enhanced dataset with flags
enhanced_dataset.toPandas().to_csv("/dbfs/FileStore/gbs_mids_with_constant_flags.csv", index=False)

# Export analysis results (raw versions for calculations)
stats_16m_naics3.toPandas().to_csv("/dbfs/FileStore/analysis_16m_naics3.csv", index=False)
stats_14m_naics3.toPandas().to_csv("/dbfs/FileStore/analysis_14m_naics3.csv", index=False)

# Export formatted versions for reports
if len(stats_16m_pd) > 0:
    stats_16m_pd.to_csv("/dbfs/FileStore/analysis_16m_naics3_formatted.csv", index=False)
if len(stats_14m_pd) > 0:
    stats_14m_pd.to_csv("/dbfs/FileStore/analysis_14m_naics3_formatted.csv", index=False)

# Export NAICS6 if available
if has_naics6:
    stats_16m_naics6.toPandas().to_csv("/dbfs/FileStore/analysis_16m_naics6.csv", index=False)
    stats_14m_naics6.toPandas().to_csv("/dbfs/FileStore/analysis_14m_naics6.csv", index=False)
    if len(stats_16m_naics6_pd) > 0:
        stats_16m_naics6_pd.to_csv("/dbfs/FileStore/analysis_16m_naics6_formatted.csv", index=False)
    if len(stats_14m_naics6_pd) > 0:
        stats_14m_naics6_pd.to_csv("/dbfs/FileStore/analysis_14m_naics6_formatted.csv", index=False)

# Export merchant lists
constant_16m_list = enhanced_dataset.filter(col("flag_16_months_constant") == 1).select("merchant_key").distinct()
constant_14m_list = enhanced_dataset.filter(col("flag_14_months_constant") == 1).select("merchant_key").distinct()

constant_16m_list.toPandas().to_csv("/dbfs/FileStore/constant_merchants_16m.csv", index=False)
constant_14m_list.toPandas().to_csv("/dbfs/FileStore/constant_merchants_14m.csv", index=False)

print("Files exported:")
print("- gbs_mids_with_constant_flags.csv (ALL original data + flags)")
print("- analysis_16m_naics3.csv / analysis_16m_naics3_formatted.csv")
print("- analysis_14m_naics3.csv / analysis_14m_naics3_formatted.csv")
if has_naics6:
    print("- analysis_16m_naics6.csv / analysis_16m_naics6_formatted.csv")
    print("- analysis_14m_naics6.csv / analysis_14m_naics6_formatted.csv")
print("- constant_merchants_16m.csv")
print("- constant_merchants_14m.csv")

# COMMAND ----------
# Summary with comma-formatted numbers-fixed v2
print("\n" + "="*70)
print("CONSTANT MERCHANT COHORT ANALYSIS SUMMARY")
print("="*70)

print(f"Original dataset: {gbs_mids_joined.count():,} rows")
print(f"Enhanced dataset: {enhanced_dataset.count():,} rows") 
print(f"Data preserved: {enhanced_dataset.count() == gbs_mids_joined.count()}")
print(f"16-month constant merchants: {constant_16m_count:,}")
print(f"14-month constant merchants: {constant_14m_count:,}")

# Calculate totals with formatting
if len(stats_16m_pd) > 0:
    total_16m_amount = stats_16m_pd["total_amount"].sum()
    total_16m_transactions = stats_16m_pd["total_transactions"].sum()
    print(f"\n16-Month Cohort Totals:")
    print(f"  Total transaction amount: {format_large_number(total_16m_amount)}")
    print(f"  Total transactions: {format_large_number(total_16m_transactions)}")

if len(stats_14m_pd) > 0:
    total_14m_amount = stats_14m_pd["total_amount"].sum()
    total_14m_transactions = stats_14m_pd["total_transactions"].sum()
    print(f"\n14-Month Cohort Totals:")
    print(f"  Total transaction amount: {format_large_number(total_14m_amount)}")
    print(f"  Total transactions: {format_large_number(total_14m_transactions)}")

print(f"\nAnalysis periods:")
print(f"Period 1: {len(period1_months)} months from {period1_months[0]} to {period1_months[-1]}")
print(f"Period 2: {len(period2_months)} months from {period2_months[0]} to {period2_months[-1]}")

print(f"\nCONSTANT MERCHANT COHORT ANALYSIS COMPLETED!")
print("All data preserved with constant merchant flags added.")
