# COMMAND ----------
# Enhanced Constant Merchant Analysis with Quarterly Tracking
# Includes improved formatting, additional metrics, and quarterly tracking beyond Feb 2022

from pyspark.sql.functions import col, countDistinct, sum as spark_sum, avg, when, lit, broadcast, round as spark_round
from datetime import datetime
import pandas as pd

print("Creating Enhanced Constant Merchant Analysis with Quarterly Tracking")

# COMMAND ----------
# Define time periods
period1_months = [202012, 202101, 202102, 202103, 202104, 202105, 202106, 
                  202107, 202108, 202109, 202110, 202111, 202112, 
                  202201, 202202, 202203]  # Dec 2020 - Mar 2022 (16 months)

period2_months = [202101, 202102, 202103, 202104, 202105, 202106, 
                  202107, 202108, 202109, 202110, 202111, 202112, 
                  202201, 202202]  # Jan 2021 - Feb 2022 (14 months)

# Get all available months for quarterly analysis
available_months = gbs_mids_joined.select("txn_year_month").distinct().collect()
available_months_list = sorted([row.txn_year_month for row in available_months])

# Define quarterly endpoints after Feb 2022
quarterly_months = []
for year_month in available_months_list:
    if year_month > 202202:  # After Feb 2022
        year = year_month // 100
        month = year_month % 100
        # Quarter ends: Mar, Jun, Sep, Dec
        if month in [3, 6, 9, 12]:
            quarterly_months.append(year_month)

print(f"14-month base period: {period2_months[0]} to {period2_months[-1]}")
print(f"Quarterly tracking periods: {quarterly_months}")

# COMMAND ----------
# Create constant merchant lists
print("Identifying constant merchants...")

# 14-month constant merchants (our base cohort)
period2_data = gbs_mids_joined.filter(col("txn_year_month").isin(period2_months))
merchants_14m_counts = period2_data.groupBy("merchant_key").agg(
    countDistinct("txn_year_month").alias("months_present")
)
constant_merchants_14m = merchants_14m_counts.filter(col("months_present") == 14).select("merchant_key")
constant_14m_count = constant_merchants_14m.count()

print(f"14-month constant merchants (base cohort): {constant_14m_count:,}")

# 16-month constant merchants for comparison
period1_data = gbs_mids_joined.filter(col("txn_year_month").isin(period1_months))
merchants_16m_counts = period1_data.groupBy("merchant_key").agg(
    countDistinct("txn_year_month").alias("months_present")
)
constant_merchants_16m = merchants_16m_counts.filter(col("months_present") == 16).select("merchant_key")

print(f"16-month constant merchants: {constant_merchants_16m.count():,}")

# COMMAND ----------
# Enhanced formatting functions
def format_number_with_commas(value):
    """Format numbers with commas and no decimals"""
    if pd.isna(value) or value is None:
        return "0"
    try:
        return f"{int(round(float(value))):,}"
    except:
        return str(value)

def format_percentage(value, total):
    """Format as percentage with 1 decimal"""
    if pd.isna(value) or pd.isna(total) or total == 0:
        return "0.0%"
    try:
        pct = (float(value) / float(total)) * 100
        return f"{pct:.1f}%"
    except:
        return "0.0%"

def format_currency(value):
    """Format currency amounts rounded to no decimals"""
    if pd.isna(value) or value is None:
        return "$0"
    try:
        return f"${int(round(float(value))):,}"
    except:
        return str(value)

# COMMAND ----------
# Base 14-month analysis with enhanced formatting
print("\n=== 14-MONTH CONSTANT MERCHANTS BASE ANALYSIS ===")

data_14m_constant = gbs_mids_joined \
    .filter(col("txn_year_month").isin(period2_months)) \
    .join(broadcast(constant_merchants_14m), on="merchant_key", how="inner")

# NAICS3 base analysis
stats_14m_naics3 = data_14m_constant.groupBy("naics3", "txn_year_month").agg(
    countDistinct("merchant_key").alias("unique_merchants"),
    spark_sum(col("adjusted_txn_cnt")).alias("total_transactions"),
    spark_sum(col("total_tran_amount")).alias("total_amount")
).withColumn("avg_amount_per_txn", col("total_amount") / col("total_transactions")) \
 .withColumn("avg_amount_per_merchant", col("total_amount") / col("unique_merchants")) \
 .orderBy("naics3", "txn_year_month")

base_14m_pd = stats_14m_naics3.toPandas()

if len(base_14m_pd) > 0:
    # Enhanced formatting with vertical separators
    base_14m_pd["merchants_fmt"] = base_14m_pd["unique_merchants"].apply(format_number_with_commas)
    base_14m_pd["transactions_fmt"] = base_14m_pd["total_transactions"].apply(format_number_with_commas)
    base_14m_pd["amount_fmt"] = base_14m_pd["total_amount"].apply(format_currency)
    base_14m_pd["avg_per_txn_fmt"] = base_14m_pd["avg_amount_per_txn"].apply(format_currency)
    base_14m_pd["avg_per_merchant_fmt"] = base_14m_pd["avg_amount_per_merchant"].apply(format_currency)
    
    print("\n14-Month Constant Merchants Base Analysis (NAICS3):")
    print("=" * 120)
    
    # Create formatted output with vertical separators
    display_df = base_14m_pd[["naics3", "txn_year_month", "merchants_fmt", "transactions_fmt", 
                             "amount_fmt", "avg_per_txn_fmt", "avg_per_merchant_fmt"]].copy()
    
    # Print with vertical separators
    print(f"{'NAICS3':<8} | {'Month':<8} | {'Merchants':<12} | {'Transactions':<15} | {'Total Amount':<15} | {'Avg/Txn':<12} | {'Avg/Merchant':<15}")
    print("-" * 120)
    
    for _, row in display_df.head(20).iterrows():
        print(f"{row['naics3']:<8} | {row['txn_year_month']:<8} | {row['merchants_fmt']:<12} | {row['transactions_fmt']:<15} | {row['amount_fmt']:<15} | {row['avg_per_txn_fmt']:<12} | {row['avg_per_merchant_fmt']:<15}")

# COMMAND ----------
# Quarterly tracking analysis for 14-month constant merchants
print(f"\n=== QUARTERLY TRACKING OF 14-MONTH CONSTANT MERCHANTS ===")
print(f"Base cohort size: {constant_14m_count:,} merchants")

# Create comprehensive quarterly analysis
quarterly_results_naics3 = []
quarterly_results_naics6 = []

# Add baseline (Feb 2022 - end of 14-month period)
baseline_month = 202202
tracking_months = [baseline_month] + quarterly_months

for month in tracking_months:
    if month in available_months_list:
        print(f"\nAnalyzing month: {month}")
        
        # Get data for this month, filtered to our 14-month constant merchants
        monthly_data = gbs_mids_joined \
            .filter(col("txn_year_month") == month) \
            .join(broadcast(constant_merchants_14m), on="merchant_key", how="inner")
        
        # NAICS3 analysis
        monthly_stats_naics3 = monthly_data.groupBy("naics3").agg(
            countDistinct("merchant_key").alias("active_merchants"),
            spark_sum(col("adjusted_txn_cnt")).alias("total_transactions"),
            spark_sum(col("total_tran_amount")).alias("total_amount")
        ).withColumn("txn_year_month", lit(month)) \
         .withColumn("avg_amount_per_txn", col("total_amount") / col("total_transactions")) \
         .withColumn("avg_amount_per_merchant", col("total_amount") / col("active_merchants"))
        
        quarterly_results_naics3.append(monthly_stats_naics3.toPandas())
        
        # NAICS6 analysis (if available)
        schema_fields = [field.name for field in gbs_mids_joined.schema.fields]
        if "naics6" in schema_fields:
            monthly_stats_naics6 = monthly_data.groupBy("naics6").agg(
                countDistinct("merchant_key").alias("active_merchants"),
                spark_sum(col("adjusted_txn_cnt")).alias("total_transactions"),
                spark_sum(col("total_tran_amount")).alias("total_amount")
            ).withColumn("txn_year_month", lit(month)) \
             .withColumn("avg_amount_per_txn", col("total_amount") / col("total_transactions")) \
             .withColumn("avg_amount_per_merchant", col("total_amount") / col("active_merchants"))
            
            quarterly_results_naics6.append(monthly_stats_naics6.toPandas())

# COMMAND ----------
# Combine and format quarterly results for NAICS3
if quarterly_results_naics3:
    quarterly_df_naics3 = pd.concat(quarterly_results_naics3, ignore_index=True)
    
    # Get unique NAICS3 and months for pivot structure
    naics3_list = sorted(quarterly_df_naics3['naics3'].unique())
    month_list = sorted(quarterly_df_naics3['txn_year_month'].unique())
    
    print(f"\n=== QUARTERLY TRACKING SUMMARY (NAICS3) ===")
    print(f"Base cohort: {constant_14m_count:,} merchants from 14-month constant sample")
    print(f"Tracking periods: {month_list}")
    print("=" * 150)
    
    # Create pivot-style output with multiple metric blocks
    metrics = ['active_merchants', 'retention_pct', 'total_amount', 'avg_amount_per_txn', 'avg_amount_per_merchant']
    
    for metric in metrics:
        print(f"\n{metric.upper().replace('_', ' ')}:")
        print("-" * 100)
        
        # Header with vertical separators
        header = f"{'NAICS3':<8}"
        for month in month_list:
            header += f" | {month:<12}"
        print(header)
        print("-" * 100)
        
        for naics3 in naics3_list:
            naics_data = quarterly_df_naics3[quarterly_df_naics3['naics3'] == naics3]
            row = f"{naics3:<8}"
            
            for month in month_list:
                month_data = naics_data[naics_data['txn_year_month'] == month]
                
                if len(month_data) > 0:
                    if metric == 'active_merchants':
                        value = format_number_with_commas(month_data['active_merchants'].iloc[0])
                    elif metric == 'retention_pct':
                        # Calculate retention percentage vs base cohort
                        base_merchants = base_14m_pd[base_14m_pd['naics3'] == naics3]['unique_merchants'].iloc[0] if len(base_14m_pd[base_14m_pd['naics3'] == naics3]) > 0 else 1
                        current_merchants = month_data['active_merchants'].iloc[0]
                        value = format_percentage(current_merchants, base_merchants)
                    elif metric == 'total_amount':
                        value = format_currency(month_data['total_amount'].iloc[0])
                    elif metric == 'avg_amount_per_txn':
                        value = format_currency(month_data['avg_amount_per_txn'].iloc[0])
                    elif metric == 'avg_amount_per_merchant':
                        value = format_currency(month_data['avg_amount_per_merchant'].iloc[0])
                    else:
                        value = "N/A"
                else:
                    value = "0"
                
                row += f" | {value:<12}"
            
            print(row)

# COMMAND ----------
# Quarterly results for NAICS6 (if available)
if quarterly_results_naics6:
    quarterly_df_naics6 = pd.concat(quarterly_results_naics6, ignore_index=True)
    
    naics6_list = sorted(quarterly_df_naics6['naics6'].unique())[:20]  # Limit to top 20 for display
    
    print(f"\n=== QUARTERLY TRACKING SUMMARY (NAICS6 - Top 20) ===")
    print(f"Base cohort: {constant_14m_count:,} merchants from 14-month constant sample")
    print("=" * 150)
    
    for metric in metrics:
        print(f"\n{metric.upper().replace('_', ' ')}:")
        print("-" * 100)
        
        # Header
        header = f"{'NAICS6':<8}"
        for month in month_list:
            header += f" | {month:<12}"
        print(header)
        print("-" * 100)
        
        for naics6 in naics6_list:
            naics_data = quarterly_df_naics6[quarterly_df_naics6['naics6'] == naics6]
            row = f"{naics6:<8}"
            
            for month in month_list:
                month_data = naics_data[naics_data['txn_year_month'] == month]
                
                if len(month_data) > 0:
                    if metric == 'active_merchants':
                        value = format_number_with_commas(month_data['active_merchants'].iloc[0])
                    elif metric == 'retention_pct':
                        # For NAICS6, calculate from base period
                        base_naics6_data = data_14m_constant.filter(col("naics6") == naics6).groupBy("naics6").agg(countDistinct("merchant_key").alias("base_merchants")).toPandas()
                        base_merchants = base_naics6_data['base_merchants'].iloc[0] if len(base_naics6_data) > 0 else 1
                        current_merchants = month_data['active_merchants'].iloc[0]
                        value = format_percentage(current_merchants, base_merchants)
                    elif metric == 'total_amount':
                        value = format_currency(month_data['total_amount'].iloc[0])
                    elif metric == 'avg_amount_per_txn':
                        value = format_currency(month_data['avg_amount_per_txn'].iloc[0])
                    elif metric == 'avg_amount_per_merchant':
                        value = format_currency(month_data['avg_amount_per_merchant'].iloc[0])
                    else:
                        value = "N/A"
                else:
                    value = "0"
                
                row += f" | {value:<12}"
            
            print(row)

# COMMAND ----------
# Export enhanced results
print("\n=== EXPORTING ENHANCED RESULTS ===")

# Export base analysis
if len(base_14m_pd) > 0:
    base_14m_pd.to_csv("/dbfs/FileStore/enhanced_14m_base_analysis_naics3.csv", index=False)

# Export quarterly tracking
if quarterly_results_naics3:
    quarterly_df_naics3.to_csv("/dbfs/FileStore/quarterly_tracking_naics3.csv", index=False)

if quarterly_results_naics6:
    quarterly_df_naics6.to_csv("/dbfs/FileStore/quarterly_tracking_naics6.csv", index=False)

# Export merchant list
constant_merchants_14m.toPandas().to_csv("/dbfs/FileStore/constant_merchants_14m_list.csv", index=False)

print("Enhanced analysis files exported:")
print("- enhanced_14m_base_analysis_naics3.csv")
print("- quarterly_tracking_naics3.csv")
print("- quarterly_tracking_naics6.csv")
print("- constant_merchants_14m_list.csv")

# COMMAND ----------
print("\n" + "="*100)
print("ENHANCED CONSTANT MERCHANT QUARTERLY ANALYSIS COMPLETED")
print("="*100)
print(f"✓ 14-month constant merchant base: {constant_14m_count:,}")
print(f"✓ Quarterly tracking periods: {len(quarterly_months)} quarters")
print(f"✓ Enhanced formatting with vertical separators and rounded numbers")
print(f"✓ Additional metrics: avg amount per transaction, avg amount per merchant")
print(f"✓ Retention tracking as percentage of base cohort")
print(f"✓ Both NAICS3 and NAICS6 level analysis")
print("\nReady for quarterly same-store sales analysis!")
