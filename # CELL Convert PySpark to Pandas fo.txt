# =============================================================================
# CELL 9: CTVAE COMPANY CROSS-TABULATION ANALYSIS (ORGANIZED BY METRIC TYPE)
# =============================================================================

# CONFIGURATION PARAMETER
ANALYSIS_DAY = "all_days"  # Options: "all_days", "day_1", "day_2", "day_3", "day_4", etc.

# Create copies to avoid modifying original data
real_data = training_data_weighted.copy()
synth_data = synthetic_data.copy()

# Fix numeric conversion
real_data['ed_amount'] = pd.to_numeric(real_data['ed_amount'], errors='coerce').fillna(0)
synth_data['ed_amount'] = pd.to_numeric(synth_data['ed_amount'], errors='coerce').fillna(0)

print("CTVAE COMPANY CROSS-TABULATION ANALYSIS")
print("=" * 50)

# Day filtering logic
if ANALYSIS_DAY != "all_days":
    day_num = int(ANALYSIS_DAY.split("_")[1])
    unique_dates = sorted(real_data['fh_file_creation_date'].unique())
    if day_num <= len(unique_dates):
        selected_date = unique_dates[day_num - 1]
        real_data = real_data[real_data['fh_file_creation_date'] == selected_date].copy()
        synth_data = synth_data[synth_data['fh_file_creation_date'] == selected_date].copy()
        print(f"Analysis for DAY {day_num} (Date: {selected_date})")
    else:
        print(f"Day {day_num} not available. Using all days.")
        ANALYSIS_DAY = "all_days"
else:
    print(f"Analysis for ALL DAYS")

print(f"Configuration: {ANALYSIS_DAY}")
print(f"Real Data: {len(real_data):,} transactions")
print(f"Synthetic Data: {len(synth_data):,} transactions")

# =============================================
# 1. TOTAL AMOUNT CROSS-TABULATION ANALYSIS
# =============================================
print("\n" + "=" * 60)
print("TOTAL AMOUNT CROSS-TABULATION ANALYSIS")
print("=" * 60)

# Original data - Amount cross-tabulation
orig_company_amount_crosstab = pd.crosstab(
    real_data['payer_Company_Name'],
    real_data['payee_Company_Name'],
    values=real_data['ed_amount'],
    aggfunc='sum',
    margins=True,
    margins_name='Total'
).round(0)
orig_amount_display = orig_company_amount_crosstab.reset_index()
print("\nTOTAL AMOUNT CROSS-TABULATION (Real Data):")
display(orig_amount_display)

# Synthetic data - Amount cross-tabulation
synth_company_amount_crosstab = pd.crosstab(
    synth_data['payer_Company_Name'],
    synth_data['payee_Company_Name'],
    values=synth_data['ed_amount'],
    aggfunc='sum',
    margins=True,
    margins_name='Total'
).round(0)
synth_amount_display = synth_company_amount_crosstab.reset_index()
print("\nTOTAL AMOUNT CROSS-TABULATION (Synthetic Data):")
display(synth_amount_display)

# =============================================
# 2. TRANSACTION COUNT CROSS-TABULATION ANALYSIS
# =============================================
print("\n" + "=" * 60)
print("TRANSACTION COUNT CROSS-TABULATION ANALYSIS")
print("=" * 60)

# Original data - Count cross-tabulation
orig_company_count_crosstab = pd.crosstab(
    real_data['payer_Company_Name'],
    real_data['payee_Company_Name'],
    margins=True,
    margins_name='Total'
)
orig_count_display = orig_company_count_crosstab.reset_index()
print("\nTRANSACTION COUNT CROSS-TABULATION (Real Data):")
display(orig_count_display)

# Synthetic data - Count cross-tabulation
synth_company_count_crosstab = pd.crosstab(
    synth_data['payer_Company_Name'],
    synth_data['payee_Company_Name'],
    margins=True,
    margins_name='Total'
)
synth_count_display = synth_company_count_crosstab.reset_index()
print("\nTRANSACTION COUNT CROSS-TABULATION (Synthetic Data):")
display(synth_count_display)

# =============================================
# 3. AVERAGE AMOUNT CROSS-TABULATION ANALYSIS
# =============================================
print("\n" + "=" * 60)
print("AVERAGE AMOUNT PER TRANSACTION CROSS-TABULATION ANALYSIS")
print("=" * 60)

# Original data - Average amount cross-tabulation
orig_company_avg_crosstab = pd.crosstab(
    real_data['payer_Company_Name'],
    real_data['payee_Company_Name'],
    values=real_data['ed_amount'],
    aggfunc='mean',
    margins=True,
    margins_name='Total'
).round(0)
orig_avg_display = orig_company_avg_crosstab.reset_index()
print("\nAVERAGE AMOUNT PER TRANSACTION CROSS-TABULATION (Real Data):")
display(orig_avg_display)

# Synthetic data - Average amount cross-tabulation
synth_company_avg_crosstab = pd.crosstab(
    synth_data['payer_Company_Name'],
    synth_data['payee_Company_Name'],
    values=synth_data['ed_amount'],
    aggfunc='mean',
    margins=True,
    margins_name='Total'
).round(0)
synth_avg_display = synth_company_avg_crosstab.reset_index()
print("\nAVERAGE AMOUNT PER TRANSACTION CROSS-TABULATION (Synthetic Data):")
display(synth_avg_display)

# =============================================
# SUMMARY STATISTICS
# =============================================
print("\n" + "=" * 60)
print("CROSS-TABULATION ANALYSIS SUMMARY")
print("=" * 60)

print("Analysis completed for all metric types:")
print("  1. Total Amount Cross-Tabulation (Real vs Synthetic)")
print("  2. Transaction Count Cross-Tabulation (Real vs Synthetic)") 
print("  3. Average Amount per Transaction (Real vs Synthetic)")

# Quick summary stats
orig_unique_payers = real_data['payer_Company_Name'].nunique()
orig_unique_payees = real_data['payee_Company_Name'].nunique()
synth_unique_payers = synth_data['payer_Company_Name'].nunique()
synth_unique_payees = synth_data['payee_Company_Name'].nunique()

print(f"\nCompany Diversity Summary:")
print(f"  Real Data: {orig_unique_payers} payers, {orig_unique_payees} payees")
print(f"  Synthetic Data: {synth_unique_payers} payers, {synth_unique_payees} payees")

print(f"\nConfiguration: {ANALYSIS_DAY}")
print("To change analysis period: Modify ANALYSIS_DAY parameter")

print("\nCOMPANY CROSS-TABULATION ANALYSIS COMPLETE")
