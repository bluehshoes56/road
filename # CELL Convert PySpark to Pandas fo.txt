# Find payee with highest transaction count and analyze their top payers
print("üèÜ TOP PAYEE ANALYSIS - Detailed Payer Breakdown")
print("=" * 60)

# Step 1: Find the payee with most incoming transactions
payee_transaction_counts = original_data['payee_Company_Name'].value_counts()
top_payee = payee_transaction_counts.index[0]
top_payee_count = payee_transaction_counts.iloc[0]

print(f"üéØ PAYEE #1: {top_payee}")
print("=" * 60)

# Step 2: Get all transactions for this top payee
top_payee_data = original_data[original_data['payee_Company_Name'] == top_payee].copy()

# Ensure ed_amount is numeric
top_payee_data['ed_amount'] = pd.to_numeric(top_payee_data['ed_amount'], errors='coerce').fillna(0)

print(f"\nüìä PAYERS TO {top_payee}:")
print(f"Total Transactions Received: {top_payee_count} (Original)")
print(f"Total Amount Received: ${top_payee_data['ed_amount'].sum():,.0f} (Original)")

# Count unique payers
unique_payers_count = top_payee_data['payer_Company_Name'].nunique()
print(f"Number of Different Payers: {unique_payers_count}")

# Step 3: Analyze each payer to this top payee
payer_analysis = top_payee_data.groupby('payer_Company_Name').agg({
    'ed_amount': ['count', 'sum', 'mean']
}).round(2)

# Flatten column names
payer_analysis.columns = ['Orig_Count', 'Orig_Amount', 'Orig_Avg']
payer_analysis = payer_analysis.reset_index()

# Sort by transaction count (descending)
payer_analysis = payer_analysis.sort_values('Orig_Count', ascending=False)

# Format the detailed analysis table
detailed_analysis = []
for idx, row in payer_analysis.iterrows():
    payer_name = row['payer_Company_Name']
    orig_count = int(row['Orig_Count'])
    orig_amount = row['Orig_Amount']
    orig_avg = row['Orig_Avg']
    
    # Truncate long company names
    display_name = payer_name[:25] + '...' if len(payer_name) > 25 else payer_name
    
    detailed_analysis.append({
        'Payer': display_name,
        'Orig_Count': orig_count,
        'Orig_Amount': f"${orig_amount:,.0f}",
        'Orig_Avg': f"${orig_avg:,.0f}"
    })

# Convert to DataFrame for display
detailed_df = pd.DataFrame(detailed_analysis)

# Add row numbers starting from 0 (like your screenshot)
detailed_df.reset_index(drop=True, inplace=True)

print(f"\nüí∞ DETAILED PAYER-TO-PAYEE ANALYSIS:")
display(detailed_df)

# Add totals row
total_count = payer_analysis['Orig_Count'].sum()
total_amount = payer_analysis['Orig_Amount'].sum()
total_avg = total_amount / total_count if total_count > 0 else 0

print(f"\nüìã TOTALS:")
print(f"Total Transactions: {total_count:,}")
print(f"Total Amount: ${total_amount:,.0f}")
print(f"Average Transaction: ${total_avg:,.0f}")

# Show top 10 summary
print(f"\nüîù TOP 10 PAYERS SUMMARY:")
top_10_summary = detailed_df.head(10).copy()
top_10_summary.index = top_10_summary.index + 1  # Start numbering from 1

display(top_10_summary)

print(f"\n‚úÖ COMPANY-LEVEL CROSS-TABULATION SUMMARY")
print("=" * 50)
print(f"Analyzed payee: {top_payee}")
print(f"Total payers analyzed: {len(payer_analysis)}")
print(f"Showing detailed breakdown of all payer relationships")
