# =============================================================================
# CELL 9: CTO PAYER-PAYEE COMPANY CROSS-TABULATION ANALYSIS (DAY-FLEXIBLE)
# Company-level matrices showing Real vs Synthetic preservation by day
# =============================================================================

# CONFIGURATION PARAMETER - Change this to filter by specific day
ANALYSIS_DAY = "all_days"  # Options: "all_days", "day_1", "day_2", "day_3", "day_4", etc.

# Create copies to avoid modifying original data
real_data = training_data_weighted.copy()
synth_data = synthetic_data.copy()

# Fix numeric conversion
real_data['ed_amount'] = pd.to_numeric(real_data['ed_amount'], errors='coerce')
real_data['ed_amount'] = real_data['ed_amount'].fillna(0)

synth_data['ed_amount'] = pd.to_numeric(synth_data['ed_amount'], errors='coerce')
synth_data['ed_amount'] = synth_data['ed_amount'].fillna(0)

print("üè¢ PAYER-PAYEE COMPANY CROSS-TABULATION ANALYSIS")
print("=" * 50)

# Day filtering logic
if ANALYSIS_DAY != "all_days":
    day_num = int(ANALYSIS_DAY.split("_")[1])
    unique_dates = sorted(real_data['fh_file_creation_date'].unique())
    if day_num <= len(unique_dates):
        selected_date = unique_dates[day_num - 1]
        real_data = real_data[real_data['fh_file_creation_date'] == selected_date].copy()
        synth_data = synth_data[synth_data['fh_file_creation_date'] == selected_date].copy()
        print(f"üìÖ Analysis for DAY {day_num} (Date: {selected_date})")
    else:
        print(f"‚ö†Ô∏è Day {day_num} not available. Using all days.")
        ANALYSIS_DAY = "all_days"
else:
    print(f"üìÖ Analysis for ALL DAYS")

print(f"Configuration: {ANALYSIS_DAY}")

# Get top companies to make readable matrices
top_payers = real_data.groupby('payer_Company_Name')['ed_amount'].sum().nlargest(10).index.tolist()
top_payees = real_data.groupby('payee_Company_Name')['ed_amount'].sum().nlargest(10).index.tolist()

# Filter for top companies only
real_filtered = real_data[
    (real_data['payer_Company_Name'].isin(top_payers)) & 
    (real_data['payee_Company_Name'].isin(top_payees))
].copy()

synth_filtered = synth_data[
    (synth_data['payer_Company_Name'].isin(top_payers)) & 
    (synth_data['payee_Company_Name'].isin(top_payees))
].copy()

print(f"Filtered Data ({ANALYSIS_DAY}): Real {len(real_filtered):,} | Synthetic {len(synth_filtered):,} transactions")
print(f"Top 10 Payers x Top 10 Payees Matrix")

# =============================================
# REAL DATA - PAYER vs PAYEE CROSS-TABULATION
# =============================================
print(f"\nüè¢ REAL DATA - PAYER vs PAYEE COMPANIES ({ANALYSIS_DAY}):")

# 1. Count cross-tabulation
real_count_crosstab = pd.crosstab(
    real_filtered['payer_Company_Name'],
    real_filtered['payee_Company_Name'],
    margins=True,
    margins_name='Total'
)
print(f"\nüìä TRANSACTION COUNT CROSS-TABULATION (Real - {ANALYSIS_DAY}):")
display(real_count_crosstab)

# 2. Amount cross-tabulation
real_amount_crosstab = pd.crosstab(
    real_filtered['payer_Company_Name'],
    real_filtered['payee_Company_Name'],
    values=real_filtered['ed_amount'],
    aggfunc='sum',
    margins=True,
    margins_name='Total'
).round(1)
print(f"\nüí∞ TOTAL AMOUNT CROSS-TABULATION (Real - {ANALYSIS_DAY}):")
display(real_amount_crosstab)

# 3. Average amount per transaction cross-tabulation
real_avg_crosstab = pd.crosstab(
    real_filtered['payer_Company_Name'],
    real_filtered['payee_Company_Name'],
    values=real_filtered['ed_amount'],
    aggfunc='mean',
    margins=True,
    margins_name='Total'
).round(1)
print(f"\nüìä AVERAGE AMOUNT PER TRANSACTION CROSS-TABULATION (Real - {ANALYSIS_DAY}):")
display(real_avg_crosstab)

# =============================================
# SYNTHETIC DATA - PAYER vs PAYEE CROSS-TABULATION
# =============================================
print(f"\nü§ñ SYNTHETIC DATA - PAYER vs PAYEE COMPANIES ({ANALYSIS_DAY}):")

# 1. Count cross-tabulation
synth_count_crosstab = pd.crosstab(
    synth_filtered['payer_Company_Name'],
    synth_filtered['payee_Company_Name'],
    margins=True,
    margins_name='Total'
)
print(f"\nüìä TRANSACTION COUNT CROSS-TABULATION (Synthetic - {ANALYSIS_DAY}):")
display(synth_count_crosstab)

# 2. Amount cross-tabulation
synth_amount_crosstab = pd.crosstab(
    synth_filtered['payer_Company_Name'],
    synth_filtered['payee_Company_Name'],
    values=synth_filtered['ed_amount'],
    aggfunc='sum',
    margins=True,
    margins_name='Total'
).round(1)
print(f"\nüí∞ TOTAL AMOUNT CROSS-TABULATION (Synthetic - {ANALYSIS_DAY}):")
display(synth_amount_crosstab)

# 3. Average amount per transaction cross-tabulation
synth_avg_crosstab = pd.crosstab(
    synth_filtered['payer_Company_Name'],
    synth_filtered['payee_Company_Name'],
    values=synth_filtered['ed_amount'],
    aggfunc='mean',
    margins=True,
    margins_name='Total'
).round(1)
print(f"\nüìä AVERAGE AMOUNT PER TRANSACTION CROSS-TABULATION (Synthetic - {ANALYSIS_DAY}):")
display(synth_avg_crosstab)

# =============================================
# DIFFERENCE ANALYSIS - FIXED
# =============================================
print(f"\nüìà REAL vs SYNTHETIC COMPARISON ({ANALYSIS_DAY}):")

# Get intersection of companies that exist in both datasets
common_payers = sorted(set(real_count_crosstab.index) & set(synth_count_crosstab.index))
common_payees = sorted(set(real_count_crosstab.columns) & set(synth_count_crosstab.columns))

# Remove 'Total' from alignment
common_payers = [x for x in common_payers if x != 'Total']
common_payees = [x for x in common_payees if x != 'Total']

if len(common_payers) > 0 and len(common_payees) > 0:
    # Reindex both matrices to have same dimensions
    real_count_aligned = real_count_crosstab.reindex(index=common_payers, columns=common_payees, fill_value=0)
    synth_count_aligned = synth_count_crosstab.reindex(index=common_payers, columns=common_payees, fill_value=0)
    
    # Calculate percentage differences for counts
    count_diff = ((synth_count_aligned - real_count_aligned) / (real_count_aligned + 1e-6) * 100).round(1)
    print(f"\nüìä TRANSACTION COUNT DIFFERENCES % (Synthetic vs Original):")
    display(count_diff)
    
    # Amount differences
    real_amount_aligned = real_amount_crosstab.reindex(index=common_payers, columns=common_payees, fill_value=0)
    synth_amount_aligned = synth_amount_crosstab.reindex(index=common_payers, columns=common_payees, fill_value=0)
    amount_diff = ((synth_amount_aligned - real_amount_aligned) / (real_amount_aligned + 1e-6) * 100).round(1)
    print(f"\nüí∞ TOTAL AMOUNT DIFFERENCES % (Synthetic vs Original):")
    display(amount_diff)
    
    # Average amount differences
    real_avg_aligned = real_avg_crosstab.reindex(index=common_payers, columns=common_payees, fill_value=0)
    synth_avg_aligned = synth_avg_crosstab.reindex(index=common_payers, columns=common_payees, fill_value=0)
    avg_diff = ((synth_avg_aligned - real_avg_aligned) / (real_avg_aligned + 1e-6) * 100).round(1)
    print(f"\nüìà AVERAGE AMOUNT DIFFERENCES % (Synthetic vs Original):")
    display(avg_diff)
    
    # Summary metrics
    total_real_relationships = (real_count_aligned > 0).sum().sum()
    total_synth_relationships = (synth_count_aligned > 0).sum().sum()
    preserved_relationships = ((real_count_aligned > 0) & (synth_count_aligned > 0)).sum().sum()
    
    preservation_rate = (preserved_relationships / total_real_relationships * 100) if total_real_relationships > 0 else 0
    
    print(f"\nüéØ CTO SUMMARY ({ANALYSIS_DAY}):")
    print(f"  Relationship Preservation: {preservation_rate:.1f}%")
    print(f"  Real Payer-Payee Pairs: {total_real_relationships:,}")
    print(f"  Synthetic Payer-Payee Pairs: {total_synth_relationships:,}")
    print(f"  Preserved Pairs: {preserved_relationships:,}")
    
    if preservation_rate >= 80:
        print(f"  ‚úÖ EXCELLENT: Business relationships well preserved")
    elif preservation_rate >= 60:
        print(f"  ‚ö†Ô∏è GOOD: Most relationships preserved")
    else:
        print(f"  ‚ùå NEEDS IMPROVEMENT: Significant relationship loss")

else:
    print(f"‚ö†Ô∏è No common companies found between real and synthetic data for comparison")

print(f"\n‚úÖ PAYER-PAYEE CROSS-TABULATION ANALYSIS COMPLETE ({ANALYSIS_DAY})")

print(f"\nüìã USAGE INSTRUCTIONS:")
print(f"  To analyze specific day: Change ANALYSIS_DAY = 'day_1', 'day_2', 'day_3', etc.")
print(f"  To analyze all days: Change ANALYSIS_DAY = 'all_days'")
print(f"  Current setting: {ANALYSIS_DAY}")
