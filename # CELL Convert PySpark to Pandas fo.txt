# Display 10 transactions with diverse payer companies (3+2+4+1 pattern)
print("📋 ORIGINAL DATA SAMPLE - 10 Transactions with Diverse Payers")
print("=" * 60)

# Get unique payer companies and their transaction counts
unique_payers = original_data['payer_Company_Name'].unique()
payer_counts = {}
for payer in unique_payers:
    payer_counts[payer] = len(original_data[original_data['payer_Company_Name'] == payer])

print(f"Total unique payers in dataset: {len(unique_payers)}")

# Find payers with sufficient transactions for each requirement
payers_with_3_plus = [payer for payer, count in payer_counts.items() if count >= 3]
payers_with_2_plus = [payer for payer, count in payer_counts.items() if count >= 2]  
payers_with_4_plus = [payer for payer, count in payer_counts.items() if count >= 4]
payers_with_1_plus = [payer for payer, count in payer_counts.items() if count >= 1]

print(f"\nPayers with 4+ transactions: {len(payers_with_4_plus)}")
print(f"Payers with 3+ transactions: {len(payers_with_3_plus)}")
print(f"Payers with 2+ transactions: {len(payers_with_2_plus)}")

# Select appropriate payers for the pattern
sample_rows = []

# First 3 rows - Use first payer with 3+ transactions
payer1 = payers_with_3_plus[0]
payer1_data = original_data[original_data['payer_Company_Name'] == payer1].head(3)
sample_rows.append(payer1_data)

# Next 2 rows - Use second payer with 2+ transactions (different from first)
payer2 = next(p for p in payers_with_2_plus if p != payer1)
payer2_data = original_data[original_data['payer_Company_Name'] == payer2].head(2)
sample_rows.append(payer2_data)

# Next 4 rows - Use first payer with 4+ transactions (different from first two)
payer3 = next(p for p in payers_with_4_plus if p not in [payer1, payer2])
payer3_data = original_data[original_data['payer_Company_Name'] == payer3].head(4)
sample_rows.append(payer3_data)

# Final 1 row - Use different payer
payer4 = next(p for p in payers_with_1_plus if p not in [payer1, payer2, payer3])
payer4_data = original_data[original_data['payer_Company_Name'] == payer4].head(1)
sample_rows.append(payer4_data)

# Combine all sample rows
sample_data = pd.concat(sample_rows)[['payer_Company_Name', 'payee_Company_Name', 'ed_amount', 'fh_file_creation_date', 'fh_file_creation_time']]

# Format for better display
sample_formatted = sample_data.copy()
sample_formatted['ed_amount'] = sample_formatted['ed_amount'].apply(lambda x: f"${x:,.2f}")
sample_formatted['fh_file_creation_date'] = sample_formatted['fh_file_creation_date'].astype(str)
sample_formatted['fh_file_creation_time'] = sample_formatted['fh_file_creation_time'].astype(str).str.zfill(4)

# Rename columns for clarity
sample_formatted.columns = ['Payer_Company', 'Payee_Company', 'Transaction_Amount', 'Transaction_Date', 'Transaction_Time']

# Add row numbers to show the pattern
sample_formatted.reset_index(drop=True, inplace=True)
sample_formatted.index = sample_formatted.index + 1

display(sample_formatted)

print(f"\nPattern achieved:")
print(f"Rows 1-3: {payer1} ({payer_counts[payer1]} transactions available)")
print(f"Rows 4-5: {payer2} ({payer_counts[payer2]} transactions available)")
print(f"Rows 6-9: {payer3} ({payer_counts[payer3]} transactions available)")
print(f"Row 10: {payer4} ({payer_counts[payer4]} transactions available)")
print(f"\nFinal sample contains {len(sample_formatted)} transactions")
print(f"\nOriginal dataset contains {len(original_data):,} total transactions")



====================================================




# CELL 9: Complete Multi-Dimensional Validation Dashboard

from matplotlib.gridspec import GridSpec
from IPython.display import HTML, display
import seaborn as sns
from scipy import stats
from scipy.stats import chi2_contingency
import numpy as np

def complete_multidimensional_validation(original: pd.DataFrame, synthetic: pd.DataFrame):
    """Complete validation with multi-dimensional analysis across all business dimensions."""
    
    print("🎯 COMPLETE MULTI-DIMENSIONAL VALIDATION DASHBOARD")
    print("=" * 80)
    
    # =============================================
    # SECTION 1: PAYER-CENTRIC ANALYSIS
    # =============================================
    print("\n💰 SECTION 1: PAYER-CENTRIC ANALYSIS")
    print("=" * 50)
    
    # Group by payer and analyze transaction patterns - Fixed numeric conversion
    try:
        # Ensure ed_amount is numeric
        original['ed_amount'] = pd.to_numeric(original['ed_amount'], errors='coerce')
        synthetic['ed_amount'] = pd.to_numeric(synthetic['ed_amount'], errors='coerce')
        
        orig_payer_stats = original.groupby('payer_Company_Name')['ed_amount'].agg(['count', 'mean', 'sum', 'std']).reset_index()
        synth_payer_stats = synthetic.groupby('payer_Company_Name')['ed_amount'].agg(['count', 'mean', 'sum', 'std']).reset_index()
        
        # Compare top 10 payers by total volume
        top_payers = orig_payer_stats.nlargest(10, 'sum')['payer_Company_Name'].tolist()
        
        payer_analysis = []
        for payer in top_payers:
            orig_data = orig_payer_stats[orig_payer_stats['payer_Company_Name'] == payer]
            synth_data = synth_payer_stats[synth_payer_stats['payer_Company_Name'] == payer]
            
            if not orig_data.empty:
                orig_count = orig_data['count'].iloc[0]
                synth_count = synth_data['count'].iloc[0] if not synth_data.empty else 0
                orig_avg = orig_data['mean'].iloc[0]
                synth_avg = synth_data['mean'].iloc[0] if not synth_data.empty else 0
                
                count_diff = ((synth_count - orig_count) / orig_count * 100) if orig_count > 0 else 0
                avg_diff = ((synth_avg - orig_avg) / orig_avg * 100) if orig_avg > 0 else 0
                
                payer_analysis.append({
                    'Payer': payer[:30] + '...' if len(payer) > 30 else payer,
                    'Orig_Count': orig_count,
                    'Synth_Count': synth_count,
                    'Count_Diff_%': f"{count_diff:+.1f}%",
                    'Orig_Avg': f"${orig_avg:,.0f}",
                    'Synth_Avg': f"${synth_avg:,.0f}",
                    'Avg_Diff_%': f"{avg_diff:+.1f}%"
                })
        
        payer_df = pd.DataFrame(payer_analysis)
        print("\n💸 TOP PAYER COMPARISON:")
        display(payer_df)
        
    except Exception as e:
        print(f"⚠️ Error in payer analysis: {str(e)}")
        print("Continuing with other validation steps...")
    
    # =============================================
    # SECTION 2: PAYEE-CENTRIC ANALYSIS
    # =============================================
    print("\n🏢 SECTION 2: PAYEE-CENTRIC ANALYSIS")
    print("=" * 50)
    
    try:
        orig_payee_stats = original.groupby('payee_Company_Name')['ed_amount'].agg(['count', 'mean', 'sum']).reset_index()
        synth_payee_stats = synthetic.groupby('payee_Company_Name')['ed_amount'].agg(['count', 'mean', 'sum']).reset_index()
        
        # Compare top payees
        top_payees = orig_payee_stats.nlargest(5, 'sum')['payee_Company_Name'].tolist()
        
        print("Top 5 Payees by Volume:")
        for payee in top_payees:
            orig_data = orig_payee_stats[orig_payee_stats['payee_Company_Name'] == payee]
            synth_data = synth_payee_stats[synth_payee_stats['payee_Company_Name'] == payee]
            
            if not orig_data.empty:
                orig_count = orig_data['count'].iloc[0]
                synth_count = synth_data['count'].iloc[0] if not synth_data.empty else 0
                print(f"  {payee}: {orig_count} → {synth_count} transactions")
        
    except Exception as e:
        print(f"⚠️ Error in payee analysis: {str(e)}")
    
    # =============================================
    # SECTION 3: STATISTICAL SUMMARY
    # =============================================
    print("\n📊 SECTION 3: STATISTICAL SUMMARY")
    print("=" * 50)
    
    # Basic statistics comparison
    stats_comparison = {
        'Metric': ['Total Transactions', 'Avg Amount', 'Total Volume', 'Unique Payers', 'Unique Payees'],
        'Original': [
            len(original),
            f"${original['ed_amount'].mean():.2f}",
            f"${original['ed_amount'].sum():,.0f}",
            original['payer_Company_Name'].nunique(),
            original['payee_Company_Name'].nunique()
        ],
        'Synthetic': [
            len(synthetic),
            f"${synthetic['ed_amount'].mean():.2f}",
            f"${synthetic['ed_amount'].sum():,.0f}",
            synthetic['payer_Company_Name'].nunique(),
            synthetic['payee_Company_Name'].nunique()
        ]
    }
    
    stats_df = pd.DataFrame(stats_comparison)
    display(stats_df)
    
    # =============================================
    # SECTION 4: QUALITY ASSESSMENT
    # =============================================
    print("\n🎯 SECTION 4: QUALITY ASSESSMENT")
    print("=" * 50)
    
    # Calculate similarity scores
    amount_similarity = 1 - abs(original['ed_amount'].mean() - synthetic['ed_amount'].mean()) / original['ed_amount'].mean()
    amount_similarity = max(0, min(1, amount_similarity))
    
    payer_similarity = len(set(original['payer_Company_Name']) & set(synthetic['payer_Company_Name'])) / len(set(original['payer_Company_Name']))
    
    overall_quality = (amount_similarity + payer_similarity) / 2
    
    print(f"📊 QUALITY SCORES:")
    print(f"Amount Similarity: {amount_similarity:.3f}")
    print(f"Payer Similarity: {payer_similarity:.3f}")
    print(f"Overall Quality: {overall_quality:.3f}")
    
    if overall_quality >= 0.8:
        print("Assessment: ✅ EXCELLENT - High quality synthetic data")
    elif overall_quality >= 0.6:
        print("Assessment: ⚡ GOOD - Acceptable synthetic data quality")
    elif overall_quality >= 0.4:
        print("Assessment: ⚠️ MODERATE - Some improvements needed")
    else:
        print("Assessment: 🔧 NEEDS WORK - Significant improvements required")
    
    print("\n" + "="*80)
    print("✅ COMPLETE MULTI-DIMENSIONAL VALIDATION FINISHED")
    print("📊 All business dimensions analyzed:")
    print("   ✓ Payer-centric patterns")
    print("   ✓ Payee-centric patterns") 
    print("   ✓ Statistical comparisons")
    print("   ✓ Quality assessment")

# Run complete multi-dimensional validation
print("🔄 Running complete multi-dimensional validation analysis...")
complete_results = complete_multidimensional_validation(original_data, synthetic_data)

print("\n" + "=" * 80)
print("✅ COMPLETE MULTI-DIMENSIONAL VALIDATION DASHBOARD")
print("=" * 80)
