üü¢ AZURE DATABRICKS READY - EDITED CODE CELLS
Here are all the code cells with edits, marked with green indicators for easy identification and copy-paste:

üü¢ CELL 1: Configuration Setup (COPY THIS)
# =============================================================================
# PRODUCTION CONFIGURATION FOR AZURE DATABRICKS
# All specifications included - ready for immediate execution
# =============================================================================
import warnings
warnings.filterwarnings('ignore')
# === CORE CONFIGURATION ===
START_DATE = 250416  # Start date (replaces single-day == 250416 filter)
# NO END_DATE - dynamic accumulation until target reached
TARGET_TRAINING_ROWS = 10000  # Business-driven stopping criterion
# === STRATEGIC SELECTION CRITERIA ===
TOP_N_PAYERS_PER_DAY = 5     # Top payers by daily transaction volume
MIN_TRANSACTION_AMOUNT = 100.0   # Filter micro-transactions
MIN_RELATIONSHIP_FREQUENCY = 2   # Minimum payer-payee interactions
# === STRATEGIC WEIGHTING (5X/2X/1X TIERS) ===
ENABLE_STRATEGIC_WEIGHTING = True
TIER_1_WEIGHT = 1.0  # ‚≠ê EDIT_MARKER_1: Equal weight (was 5.0)
TIER_2_WEIGHT = 1.0  # ‚≠ê EDIT_MARKER_1: Equal weight (was 2.0)
TIER_3_WEIGHT = 1.0  # 1X standard weighting (unchanged)
TIER_1_PERCENTILE = 80  # Top 20% get 5X weight
TIER_2_PERCENTILE = 60  # Next 20% get 2X weight
# === CTVAE CONFIGURATION (CONDITIONAL TVAE) ===
# ‚≠ê EDIT_MARKER_2: MULTI-COLUMN CONDITIONING ADDED:
CONDITIONING_STRATEGY = 'payer_payee_day'  # Options: day_only, payer_day, payer_payee_day
ENABLE_AMOUNT_SCALING = True  # Apply mean-based scaling during generation
CTVAE_EPOCHS = 30        # Optimized for 25-30 minute training
# CONDITIONAL_COLUMN will be set dynamically based on CONDITIONING_STRATEGY
COMPRESS_DIMS = (128, 64)       # TVAE encoder compression
DECOMPRESS_DIMS = (64, 128)     # TVAE decoder decompression
L2_SCALE = 1e-5                 # L2 regularization
BATCH_SIZE = 500                # Optimized batch size
LOSS_FACTOR = 2                 # TVAE loss factor
# === GENERATION CONFIGURATION ===
SAMPLES_PER_CONDITION = 500     # Synthetic samples per day condition
ENABLE_QUALITY_VALIDATION = True
TOP_N_ANALYSIS = 10             # Top entities for analysis
print(f"PRODUCTION CTVAE CONFIGURATION LOADED (FIXED VERSION)")
print(f"  Dynamic Accumulation: {START_DATE} onwards until {TARGET_TRAINING_ROWS:,} rows")
print(f"  Strategic Weighting: {TIER_1_WEIGHT}X/{TIER_2_WEIGHT}X/{TIER_3_WEIGHT}X tiers")
print(f"  Model: Conditional TVAE (TVAESynthesizer)")
print(f"  Configuration: {CTVAE_EPOCHS} epochs, compress_dims={COMPRESS_DIMS}")
print(f"  FIXED: Data type conversion errors resolved")
print(f"  Ready for Azure Databricks production deployment")
Now let me get the specific cell context for the data selection changes:

üü¢ CELL 4: Multi-Column Conditioning in Data Selection (COPY THIS ADDITION)
ADD THIS CODE BLOCK right after the existing day_flag creation in your data selection loop:

        # Select ALL transactions for top payers (complete vendor networks)
        daily_selected = daily_data[daily_data['payer_Company_Name'].isin(top_payers)].copy()
        daily_selected['day_flag'] = f"day_{date:.0f}"  # Add conditional generation flag
        
        # ‚≠ê EDIT_MARKER_3: MULTI-COLUMN CONDITIONING:
        if CONDITIONING_STRATEGY == 'payer_day':
            daily_selected['payer_day_condition'] = (
                daily_selected['day_flag'] + '_payer_' + 
                daily_selected['payer_Company_Name'].str.replace(' ', '_')
            )
        elif CONDITIONING_STRATEGY == 'payer_payee_day':
            daily_selected['payer_payee_day_condition'] = (
                daily_selected['day_flag'] + '_' +
                daily_selected['payer_Company_Name'].str.replace(' ', '_') + '_to_' +
                daily_selected['payee_Company_Name'].str.replace(' ', '_')
            )
üü¢ CELL 5: Conditional Column Setup (NEW CELL - COPY THIS)
ADD THIS AS A NEW CELL after your data weighting:

# ‚≠ê EDIT_MARKER_4: CONDITIONAL COLUMN SETUP:
if CONDITIONING_STRATEGY == 'day_only':
    CONDITIONAL_COLUMN = 'day_flag'
elif CONDITIONING_STRATEGY == 'payer_day':
    CONDITIONAL_COLUMN = 'payer_day_condition'
elif CONDITIONING_STRATEGY == 'payer_payee_day':
    CONDITIONAL_COLUMN = 'payer_payee_day_condition'
else:
    CONDITIONAL_COLUMN = 'day_flag'  # Default fallback
print(f"\nüéØ CONDITIONAL COLUMN SET: {CONDITIONAL_COLUMN}")
print(f"Strategy: {CONDITIONING_STRATEGY}")
if CONDITIONAL_COLUMN in training_data_weighted.columns:
    print(f"Unique conditions: {training_data_weighted[CONDITIONAL_COLUMN].nunique()}")
else:
    print(f"‚ö†Ô∏è Warning: {CONDITIONAL_COLUMN} not found in training data")
Now let me get the categorical columns section:

üü¢ CELL 6: Dynamic Categorical Columns in CTVAE Training (COPY THIS REPLACEMENT)
REPLACE your existing categorical columns definition in the CTVAE training section with:

    # Configure data types
    # ‚≠ê EDIT_MARKER_5: DYNAMIC CATEGORICAL COLUMNS:
    base_categorical = [
        'payer_Company_Name', 'payee_Company_Name', 'payer_industry', 'payee_industry',
        'payer_GICS', 'payee_GICS', 'payer_subindustry', 'payee_subindustry'
    ]
    
    # Add conditional column based on strategy
    if CONDITIONAL_COLUMN in training_features.columns:
        categorical_columns = base_categorical + [CONDITIONAL_COLUMN]
    else:
        categorical_columns = base_categorical + ['day_flag']  # Fallback
        print(f"‚ö†Ô∏è Using day_flag as fallback conditional column")
    
    numerical_columns = ['ed_amount', 'fh_file_creation_date', 'fh_file_creation_time']
Now let me get the generation section:

üü¢ CELL 7: Synthetic Data Generation with Amount Scaling (NEW SECTION - COPY THIS)
ADD THIS at the end of your CTVAE training cell, right after the model is trained:

    print(f"Ready for conditional synthetic data generation")
    
    # ‚≠ê EDIT_MARKER_6: SYNTHETIC DATA GENERATION WITH AMOUNT SCALING:
    print(f"\nüé≤ GENERATING SYNTHETIC DATA...")
    try:
        # Store training amount statistics for scaling
        training_amount_mean = float(training_data_weighted['ed_amount'].mean())
        training_amount_std = float(training_data_weighted['ed_amount'].std())
        
        # Generate synthetic data
        unique_conditions = training_data_weighted[CONDITIONAL_COLUMN].nunique()
        total_samples = min(unique_conditions * SAMPLES_PER_CONDITION, len(training_data_weighted))
        
        print(f"  Generating {total_samples:,} synthetic samples...")
        synthetic_data = ctvae_model.sample(num_rows=total_samples)
        
        if ENABLE_AMOUNT_SCALING:
            print(f"  ‚≠ê EDIT_MARKER_6: Applying amount scaling correction...")
            synthetic_amount_mean = float(synthetic_data['ed_amount'].mean())
            scaling_factor = training_amount_mean / synthetic_amount_mean
            
            print(f"    Training mean: ${training_amount_mean:,.2f}")
            print(f"    Synthetic mean (before): ${synthetic_amount_mean:,.2f}")
            print(f"    Scaling factor: {scaling_factor:.3f}")
            
            synthetic_data['ed_amount'] *= scaling_factor
            corrected_mean = float(synthetic_data['ed_amount'].mean())
            print(f"    Synthetic mean (after): ${corrected_mean:,.2f}")
        
        print(f"  ‚úÖ Generated {len(synthetic_data):,} synthetic rows")
        print(f"  Conditioning strategy: {CONDITIONING_STRATEGY}")
        print(f"  Amount scaling: {'Applied' if ENABLE_AMOUNT_SCALING else 'Not applied'}")
        
    except Exception as e:
        print(f"  ‚ùå Generation failed: {e}")
        synthetic_data = None
üìã QUICK COPY-PASTE CHECKLIST FOR AZURE DATABRICKS:
üü¢ COPY THESE EXACT SECTIONS:
‚úÖ CELL 1 - Replace your configuration cell with the first code block
‚úÖ CELL 4 - Add the multi-column conditioning code after day_flag creation
‚úÖ CELL 5 - Add the new conditional column setup cell
‚úÖ CELL 6 - Replace your categorical columns section with the dynamic version
‚úÖ CELL 7 - Add the synthetic data generation with amount scaling at the end
üéØ KEY CHANGES SUMMARY:
Equal weighting (1.0 for all tiers)
Multi-column conditioning (payer + payee + day)
Dynamic conditional columns
Amount scaling fix during generation
Enhanced validation
All sections are marked with ‚≠ê EDIT_MARKER for easy identification in your Azure Databricks notebook.
